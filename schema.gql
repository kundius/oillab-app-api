# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

interface DefaultError {
  message: String!
}

type File {
  name: String!
  path: String!
  url: String!
  size: Float!
  type: String
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User
  id: Float!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Lubricant {
  model: String!
  brand: String!
  viscosity: String
  productType: ProductType
  createdAt: DateTime!
  updatedAt: DateTime!
  reports: [Report]!
  id: Float!
}

enum ProductType {
  Fuel
  Oil
  Coolant
}

type Report {
  color: ReportColor
  number: Int
  formNumber: String
  vehicleToppingUpLubricant: String
  lubricantState: String
  selectionVolume: String
  note: String
  sampledAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  client: User
  vehicle: Vehicle
  lubricantEntity: Lubricant
  laboratoryResult: File
  expressLaboratoryResult: File
  id: Float!
  totalMileage: String!
  lubricantMileage: String!
  samplingNodes: String!
}

enum ReportColor {
  Red
  Yellow
  LightGreen
}

type Vehicle {
  model: String!
  liquidVolume: String
  createdAt: DateTime!
  updatedAt: DateTime!
  owner: User!
  reports: [Report!]!
  id: Float!
  releaseYear: String!
  stateNumber: String!
  engineModel: String!
}

type User {
  name: String!
  email: String!
  contactPerson: String
  phone: String
  role: UserRole!
  isActive: Boolean!
  lastActivityAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  vehicles: [Vehicle]!
  reports: [Report]!
  files: [File]!
  id: Float!
  password: String!
}

enum UserRole {
  Member
  Administrator
  Manager
}

type NotFoundError implements DefaultError {
  message: String!
}

type DefaultMutationResponse {
  success: Boolean!
  error: DefaultError
}

type AuthenticationError implements DefaultError {
  message: String!
}

type NotAllowedError implements DefaultError {
  message: String!
}

type ValidationError implements DefaultError {
  message: String!
  field: String!
}

type PageInfo {
  total: Int!
  page: Int!
  perPage: Int!
}

type UserCreateResponse {
  success: Boolean!
  error: DefaultError
  record: User
}

type UserUpdateResponse {
  success: Boolean!
  error: DefaultError
  record: User
}

type UserPaginateResponse {
  pageInfo: PageInfo!
  items: [User!]!
}

type VehicleCreateResponse {
  success: Boolean!
  error: DefaultError
  record: Vehicle
}

type VehicleUpdateResponse {
  success: Boolean!
  error: DefaultError
  record: Vehicle
}

type VehiclePaginateResponse {
  pageInfo: PageInfo!
  items: [Vehicle!]!
}

type LubricantCreateResponse {
  success: Boolean!
  error: DefaultError
  record: Lubricant
}

type LubricantUpdateResponse {
  success: Boolean!
  error: DefaultError
  record: Lubricant
}

type LubricantPaginateResponse {
  pageInfo: PageInfo!
  items: [Lubricant!]!
}

type ReportCreateResponse {
  success: Boolean!
  error: DefaultError
  record: Report
}

type ReportUpdateResponse {
  success: Boolean!
  error: DefaultError
  record: Report
}

type ReportPaginateResponse {
  pageInfo: PageInfo!
  items: [Report!]!
}

type ReportGeneratePdfResponse {
  success: Boolean!
  error: DefaultError
  record: File
}

type OilTypeResearch {
  name: String!
  id: Float!
  oilType: OilType!
}

type OilType {
  name: String!
  standard: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  indicators: [OilTypeIndicator]!
  researches: [OilTypeResearch]!
  results: [Result]!
  id: Float!
}

type OilTypeIndicator {
  name: String!
  ntd: String!
  units: String!
  id: Float!
  oilType: OilType!
  resultIndicators: [ResultIndicator!]!
}

type ResultIndicator {
  value: String
  result: Result!
  oilTypeIndicator: OilTypeIndicator!
  id: Float!
}

type Result {
  number: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  oilType: OilType!
  id: Float!
  indicators: [ResultIndicator!]!
}

type ResultCreateResponse {
  success: Boolean!
  error: DefaultError
  record: Result
}

type ResultUpdateResponse {
  success: Boolean!
  error: DefaultError
  record: Result
}

type ResultPaginateResponse {
  pageInfo: PageInfo!
  items: [Result!]!
}

type OilTypeCreateResponse {
  success: Boolean!
  error: DefaultError
  record: OilType
}

type OilTypeUpdateResponse {
  success: Boolean!
  error: DefaultError
  record: OilType
}

type OilTypePaginateResponse {
  pageInfo: PageInfo!
  items: [OilType!]!
}

type OilTypeIndicatorCreateResponse {
  success: Boolean!
  error: DefaultError
  record: OilTypeIndicator
}

type OilTypeIndicatorUpdateResponse {
  success: Boolean!
  error: DefaultError
  record: OilTypeIndicator
}

type OilTypeIndicatorListResponse {
  items: [OilTypeIndicator!]!
}

type OilTypeResearchCreateResponse {
  success: Boolean!
  error: DefaultError
  record: OilTypeResearch
}

type OilTypeResearchUpdateResponse {
  success: Boolean!
  error: DefaultError
  record: OilTypeResearch
}

type OilTypeResearchListResponse {
  items: [OilTypeResearch!]!
}

type SignInResponse {
  success: Boolean!
  error: DefaultError
  token: String
  record: User
}

type Query {
  user(id: Int!): User
  currentUser: User
  userPaginate(perPage: Int = 12, page: Int = 1, sort: [UserSort!], filter: UserFilter): UserPaginateResponse!
  file(id: ID!): File
  vehicle(id: Int!): Vehicle
  vehiclePaginate(perPage: Int = 12, page: Int = 1, sort: [VehicleSort!], filter: VehicleFilter): VehiclePaginateResponse!
  report(id: Int!): Report
  reportPaginate(perPage: Int = 12, page: Int = 1, sort: [ReportSort!], filter: ReportFilter): ReportPaginateResponse!
  lubricant(id: Int!): Lubricant
  lubricantPaginate(perPage: Int = 12, page: Int = 1, sort: [LubricantSort!], filter: LubricantFilter): LubricantPaginateResponse!
  result(id: Int!): Result
  resultPaginate(perPage: Int = 12, page: Int = 1, sort: [ResultSort!], filter: ResultFilter): ResultPaginateResponse!
  oiltype(id: Int!): OilType
  oiltypePaginate(perPage: Int = 12, page: Int = 1, sort: [OilTypeSort!], filter: OilTypeFilter): OilTypePaginateResponse!
  oilTypeIndicator(id: Int!): OilType
  oilTypeIndicatorList(oilTypeId: Int!): OilTypeIndicatorListResponse!
  oilTypeResearch(id: Int!): OilType
  oilTypeResearchList(oilTypeId: Int!): OilTypeResearchListResponse!
}

enum UserSort {
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  EMAIL_ASC
  EMAIL_DESC
  CONTACT_PERSON_ASC
  CONTACT_PERSON_DESC
  PHONE_ASC
  PHONE_DESC
}

input UserFilter {
  name: StringFilterOperator
  email: StringFilterOperator
  contactPerson: StringFilterOperator
  phone: StringFilterOperator
}

input StringFilterOperator {
  eq: String
  contains: String
}

enum VehicleSort {
  MODEL_ASC
  MODEL_DESC
  RELEASE_YEAR_ASC
  RELEASE_YEAR_DESC
  STATE_NUMBER_ASC
  STATE_NUMBER_DESC
  ENGINE_MODEL_ASC
  ENGINE_MODEL_DESC
  LIQUID_VOLUME_ASC
  LIQUID_VOLUME_DESC
  GENERAL_OPERATING_TIME_ASC
  GENERAL_OPERATING_TIME_DESC
}

input VehicleFilter {
  model: StringFilterOperator
  releaseYear: StringFilterOperator
  stateNumber: StringFilterOperator
  engineModel: StringFilterOperator
  liquidVolume: StringFilterOperator
  owner: UserFilter
  ownerId: IdFilterOperator
}

input IdFilterOperator {
  eq: Float
  in: [Int!]
}

enum ReportSort {
  STATE_NUMBER_ASC
  STATE_NUMBER_DESC
  TOTAL_MILEAGE_ASC
  TOTAL_MILEAGE_DESC
  LUBRICANT_MILEAGE_ASC
  LUBRICANT_MILEAGE_DESC
  SAMPLING_NODES_ASC
  SAMPLING_NODES_DESC
  SAMPLED_AT_ASC
  SAMPLED_AT_DESC
  ID_ASC
  ID_DESC
  NUMBER_ASC
  NUMBER_DESC
  COLOR_ASC
  COLOR_DESC
}

input ReportFilter {
  color: StringFilterOperator
  lubricantEntity: LubricantFilter
  totalMileage: StringFilterOperator
  lubricantMileage: StringFilterOperator
  client: UserFilter
  vehicle: VehicleFilter
  samplingNodes: StringFilterOperator
  sampledAt: DateFilterOperator
  id: NumberFilterOperator
}

input LubricantFilter {
  model: StringFilterOperator
  brand: StringFilterOperator
  viscosity: StringFilterOperator
}

input DateFilterOperator {
  eq: DateTime
  lt: DateTime
  gt: DateTime
}

input NumberFilterOperator {
  eq: Float
  lt: Float
  gt: Float
}

enum LubricantSort {
  MODEL_ASC
  MODEL_DESC
  BRAND_ASC
  BRAND_DESC
  VISCOSITY_ASC
  VISCOSITY_DESC
}

enum ResultSort {
  ID_ASC
  ID_DESC
}

input ResultFilter {
  number: StringFilterOperator
}

enum OilTypeSort {
  NAME_ASC
  NAME_DESC
  ID_ASC
  ID_DESC
}

input OilTypeFilter {
  name: StringFilterOperator
}

type Mutation {
  signIn(input: SignInInput!): SignInResponse!
  userCreate(input: UserCreateInput!): UserCreateResponse!
  userUpdate(input: UserUpdateInput!, id: Int!): UserUpdateResponse!
  userDelete(id: Int!): DefaultMutationResponse!
  vehicleCreate(input: VehicleCreateInput!): VehicleCreateResponse!
  vehicleUpdate(input: VehicleUpdateInput!, id: Int!): VehicleUpdateResponse!
  vehicleDelete(id: Int!): DefaultMutationResponse!
  reportGeneratePdf(sort: [ReportSort!], filter: ReportFilter): ReportGeneratePdfResponse!
  reportCreate(input: ReportCreateInput!): ReportCreateResponse!
  reportUpdate(input: ReportUpdateInput!, id: Int!): ReportUpdateResponse!
  reportDelete(id: Int!): DefaultMutationResponse!
  lubricantCreate(input: LubricantCreateInput!): LubricantCreateResponse!
  lubricantUpdate(input: LubricantUpdateInput!, id: Int!): LubricantUpdateResponse!
  lubricantDelete(id: Int!): DefaultMutationResponse!
  resultCreate(input: ResultCreateInput!): ResultCreateResponse!
  resultUpdate(input: ResultUpdateInput!, id: Int!): ResultUpdateResponse!
  resultDelete(id: Int!): DefaultMutationResponse!
  oiltypeCreate(input: OilTypeCreateInput!): OilTypeCreateResponse!
  oiltypeUpdate(input: OilTypeUpdateInput!, id: Int!): OilTypeUpdateResponse!
  oiltypeDelete(id: Int!): DefaultMutationResponse!
  oilTypeIndicatorCreate(input: OilTypeIndicatorCreateInput!, oilTypeId: Int!): OilTypeIndicatorCreateResponse!
  oilTypeIndicatorUpdate(input: OilTypeIndicatorUpdateInput!, id: Int!): OilTypeIndicatorUpdateResponse!
  oilTypeIndicatorDelete(id: Int!): DefaultMutationResponse!
  oilTypeResearchCreate(input: OilTypeResearchCreateInput!, oilTypeId: Int!): OilTypeResearchCreateResponse!
  oilTypeResearchUpdate(input: OilTypeResearchUpdateInput!, id: Int!): OilTypeResearchUpdateResponse!
  oilTypeResearchDelete(id: Int!): DefaultMutationResponse!
}

input SignInInput {
  email: String!
  password: String!
}

input UserCreateInput {
  password: String!
  name: String!
  email: String!
  contactPerson: String
  phone: String
  role: String!
}

input UserUpdateInput {
  password: String
  name: String
  email: String
  contactPerson: String
  phone: String
  role: UserRole
}

input VehicleCreateInput {
  model: String!
  releaseYear: String!
  stateNumber: String!
  engineModel: String!
  liquidVolume: String
  owner: Float!
}

input VehicleUpdateInput {
  model: String
  releaseYear: String
  stateNumber: String
  engineModel: String
  liquidVolume: String
  owner: Float
}

input ReportCreateInput {
  color: String
  totalMileage: String!
  lubricantMileage: String!
  samplingNodes: String!
  formNumber: String!
  vehicleToppingUpLubricant: String
  lubricantState: String
  selectionVolume: String
  note: String
  sampledAt: DateTime!
  client: Int
  vehicle: Int
  lubricantEntityId: Int
  expressLaboratoryResult: Int
  laboratoryResult: Int
}

input ReportUpdateInput {
  color: String
  totalMileage: String
  lubricantMileage: String
  samplingNodes: String
  formNumber: String
  vehicleToppingUpLubricant: String
  lubricantState: String
  selectionVolume: String
  note: String
  sampledAt: DateTime
  client: Int
  vehicle: Int
  lubricantEntityId: Int
  expressLaboratoryResult: Int
  laboratoryResult: Int
}

input LubricantCreateInput {
  productType: String
  model: String!
  brand: String!
  viscosity: String
}

input LubricantUpdateInput {
  productType: String
  model: String
  brand: String
  viscosity: String
}

input ResultCreateInput {
  number: String!
  oilTypeId: Float!
}

input ResultUpdateInput {
  values: [ResultUpdateIndicatorValue!]!
}

input ResultUpdateIndicatorValue {
  value: String!
  oilTypeIndicatorId: Float!
}

input OilTypeCreateInput {
  name: String!
  standard: Boolean!
}

input OilTypeUpdateInput {
  name: String
  standard: Boolean
}

input OilTypeIndicatorCreateInput {
  name: String!
  ntd: String!
  units: String!
}

input OilTypeIndicatorUpdateInput {
  name: String
  ntd: String
  units: String
}

input OilTypeResearchCreateInput {
  name: String!
}

input OilTypeResearchUpdateInput {
  name: String
}
